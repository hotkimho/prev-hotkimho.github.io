I">5<h1 id="process란-무엇인가">Process란 무엇인가?</h1>
<p>프로세스의 정의를 찾아보면 <code class="language-plaintext highlighter-rouge">실행중인</code> 프로그램이라고 정의됩니다. 저는 정의된 내용을 보고 “아 프로세스는 이런거구나!” 라고 이해가 되지 않습니다. 위 말을 제 방식으로 표현하면 프로세스는 <code class="language-plaintext highlighter-rouge">프로그램을 실행하는 단위</code>로 표현할 수 있습니다</p>

<p>게임을 예로들어 <code class="language-plaintext highlighter-rouge">쿠키런</code>이라는 게임을 실행한다고 했을 때, 실행파일 즉 쿠키런 게임에 대한 코드는 저희 <code class="language-plaintext highlighter-rouge">하드 디스크</code>에 저장이 되어있고 이를 실행하면 <code class="language-plaintext highlighter-rouge">메모리(RAM)</code>에 프로세스의 형태로 올라가게 됩니다. 그리고 메모리에 쿠키런 프로세스가 올라가면 저희는 쿠키런이 <code class="language-plaintext highlighter-rouge">실행</code>됐다 라고 말합니다</p>

<p>많은 사람들이 프로그램이 멈출 때 <code class="language-plaintext highlighter-rouge">작업 관리자</code>에서 특정 프로세스를 종료시킨적이 있을 겁니다. 그리고 그 안에 <code class="language-plaintext highlighter-rouge">무수히 많은 프로세스</code>들이 있는걸 봤습니다. 이 많은 프로세스들을 어떻게 다 실행할 수 있는걸까요? <code class="language-plaintext highlighter-rouge">운영 체제</code>는 <code class="language-plaintext highlighter-rouge">시분할</code>방식을 이용하여 각각의 프로세스에 일정시간을 할당하여 처리합니다. 여러 개의 <code class="language-plaintext highlighter-rouge">프로그램(프로세스)</code>가 동시에 처리된 것 처럼 보이지만 <code class="language-plaintext highlighter-rouge">CPU</code>가 프로세스마다 시간을 할당하고 할당한 시간만큼 연산을하여 동시에 실행된 것 처럼 보이는겁니다.</p>

<p>여러개의 프로세스를 CPU가 돌아가며 처리한다고 말씀을 드렸는데 <code class="language-plaintext highlighter-rouge">A프로세스</code>를 실행하고 시간이 다 끝나면 <code class="language-plaintext highlighter-rouge">B, C, D...</code>등 다른 프로세스를 실행합니다 이렇게 다른 프로세스로 교체하는걸 <code class="language-plaintext highlighter-rouge">문맥교환(Context Switching)</code>이라고 합니다. 즉 현재 작업중인 프로세스에 대한 작업을 <code class="language-plaintext highlighter-rouge">완료 or 중단</code>하고 다른 프로세스를 연산하는걸 의미합니다. 그리고 문맥교환을 하기위해선 프로세스에 대한 <code class="language-plaintext highlighter-rouge">정보</code>가 필요한데 이 정보를 <code class="language-plaintext highlighter-rouge">PCB(Process Control Block)</code>라고 합니다. <code class="language-plaintext highlighter-rouge">프로세스가 생성이되면 PCB또한 같이 생성되고 운영체제는 PCB값으로 프로세스의 정보를 확인합니다.</code> 이 두 개념은 아래에서 자세히 기술하겠습니다.</p>

<h1 id="pcbprocess-control-blocks">PCB(Process Control Blocks)</h1>
<p><code class="language-plaintext highlighter-rouge">PCB</code>는 프로세스를 실행하는데 중요한 정보를 담고 있고 프로세스가 <code class="language-plaintext highlighter-rouge">생성</code>될 때 같이 생성됩니다 또한 프로세스가 종료되면 같이 사라집니다.</p>

<h2 id="pcb-구성">PCB 구성</h2>
<p><img src="/docs/OS/images/pcb.png" alt="pcb" /><br />
<strong>(쉽게 배우는 운영체제 pcb image)</strong></p>

<h3 id="1-포인터">1. 포인터</h3>
<p>하나의 프로세스가 실행중이고 다른 프로세스는 실행하기를 기다리고 있습니다. 이를 <code class="language-plaintext highlighter-rouge">대기 상태</code>라고 부르고 이들은 <code class="language-plaintext highlighter-rouge">대기 큐(Queue)</code>에서 실행을 대기합니다.<br />
<img src="/docs/OS/images/pcb_pointer.png" alt="pcb_queue" /></p>

<p><strong>(쉽게 배우는 운영체제 pcb image)</strong><br />
그림과 같이 <code class="language-plaintext highlighter-rouge">포인터 주소</code>를 이용하여 큐를 구성합니다. 이름 그대로 PCB의 주소를 의미합니다.<br />
대기 큐의 PCB순서는 <code class="language-plaintext highlighter-rouge">스케쥴링</code>이라는 여러 알고리즘에 의하여 순서가 결정됩니다.</p>

<h3 id="2-프로세스-상태status">2. 프로세스 상태(status)</h3>
<p>프로세스는 <code class="language-plaintext highlighter-rouge">생성, 준비, 실행, 대기, 보류</code>등 여러 상태가 있습니다. 현재 어떤 상태인지를 의미하는 값입니다.</p>

<h3 id="3-프로세스-구분자id">3. 프로세스 구분자(ID)</h3>
<p>프로세스는 각자 <code class="language-plaintext highlighter-rouge">고유</code>의 ID(정수)값을 가지고 있습니다. <code class="language-plaintext highlighter-rouge">운영체제도 프로세스를 구분</code>해야하므로 고유한 ID를 블록에 가지고 있습니다</p>

<h3 id="4-프로그램-카운터pc">4. 프로그램 카운터(PC)</h3>
<p>프로세스들이 CPU를 에게 할당받아 사용하는 시간을 <code class="language-plaintext highlighter-rouge">타임 슬라이스</code>라고 합니다. <code class="language-plaintext highlighter-rouge">A</code>에서 CPU를 <code class="language-plaintext highlighter-rouge">선점</code>하여 50%만큼 작업을 하다가 <code class="language-plaintext highlighter-rouge">B</code>가 CPU를 <code class="language-plaintext highlighter-rouge">선점</code>했습니다. 일정 시간이 흐르고 난 후 <code class="language-plaintext highlighter-rouge">A가 다시 실행</code>됐을 때 <code class="language-plaintext highlighter-rouge">어떻게 50%지점부터 시작</code>할 수 있을까요? <code class="language-plaintext highlighter-rouge">프로그램 카운터(PC)</code>에 다음 실행할 명령어의 위치를 가리켜 다시 실행되었을 때 이어서 작업할 수 있습니다. 즉 간단히 말해서 <code class="language-plaintext highlighter-rouge">다음에 실행할 명령어</code>를 가지고 있습니다.</p>

<h3 id="5-프로세스-우선순위">5. 프로세스 우선순위</h3>
<p><code class="language-plaintext highlighter-rouge">1.포인터</code> 그림에서 대기 큐는 한개 였는데 실제로는 여러 개의 큐를 가지고 있습니다. 대기 상태의 큐는 <code class="language-plaintext highlighter-rouge">우선순위에 따라 여러개</code>가 있으며 <code class="language-plaintext highlighter-rouge">우선순위가 낮은 프로세스</code>가 먼저 실행됩니다. 우선순위가 낮은 프로세스는 주로 <code class="language-plaintext highlighter-rouge">커널 프로세스</code>가 해당됩니다.</p>

<h3 id="6-ppid-cpid">6. PPID, CPID</h3>
<p>부모 프로세스, 자식 프로세스에 대한 정보를 가지고 있습니다. 프로세스는 자기 자신을 <code class="language-plaintext highlighter-rouge">복제(fork)</code>할 수 있으며 복제된 프로세스를 <code class="language-plaintext highlighter-rouge">자식</code>, 복제를 실행한 프로세스를 <code class="language-plaintext highlighter-rouge">부모</code> 프로세스라고 합니다.</p>

<h1 id="프로세스-상태context-switching">프로세스 상태(Context Switching)</h1>
<p><img src="/docs/OS/images/context_switching.png" alt="context_switching" />
<strong>(쉽게 배우는 운영체제 image)</strong> <br />
그림을 보면 5가지의 상태가 있습니다. 이 상태는 <code class="language-plaintext highlighter-rouge">프로세스가 가지는 상태</code>이고 <code class="language-plaintext highlighter-rouge">pcb의 블록값</code>으로도 가지고 있습니다. 각각 어떤 상태인지 알아봅시다.</p>

<h3 id="1-생성-상태">1. 생성 상태</h3>
<p>프로그램이 <code class="language-plaintext highlighter-rouge">메모리에 올라오고</code> 운영체제에 의해 <code class="language-plaintext highlighter-rouge">pcb가 할당받은 상태</code>를 의미합니다. 즉 프로그램이 방금 막 실행한 상태입니다. 프로세스는 생성되면 바로 실행되는게 아니라 <code class="language-plaintext highlighter-rouge">준비 상태</code>에서 실행되기를 기다립니다.</p>

<h3 id="2-준비-상태">2. 준비 상태</h3>
<p>실행 대기준인 프로세스가 기다리는 상태를 의미합니다. <code class="language-plaintext highlighter-rouge">pcb</code>가 <code class="language-plaintext highlighter-rouge">준비 큐(ready queue)</code>에서 대기하며 <code class="language-plaintext highlighter-rouge">스케쥴러</code>에 의해 관리됩니다.<br />
프로세스가 준비 상태에서 실행 상태가 되는걸 <code class="language-plaintext highlighter-rouge">dispatch</code>라고 합니다. 내부적으로 이 명령은 <code class="language-plaintext highlighter-rouge">dispatch(process id)</code>명령을 통해 실행됩니다.</p>

<h3 id="3-실행-상태">3. 실행 상태</h3>
<p>프로세스가 CPU를 할당받아 실행되는 상태입니다. 실행 상태인 프로세스의 수는 <code class="language-plaintext highlighter-rouge">CPU의 코어 수</code>입니다. CPU에서 실질적으로 연산을 하는 건 코어이기 때문에 코어 수 만큼 프로세스가 실행 상태가 됩니다<br />
프로세스가 주어진 <code class="language-plaintext highlighter-rouge">타임 슬라이스</code>내에 정해진 작업을 완료하지 못하면 <code class="language-plaintext highlighter-rouge">timeout</code>이 실행되어 <code class="language-plaintext highlighter-rouge">준비 상태</code>로 돌아가고 다시 실행되기를 기다립니다. 만약 실행 상태에 있는 프로세스가 <code class="language-plaintext highlighter-rouge">입출력</code>을 요청하면 cpu는 <code class="language-plaintext highlighter-rouge">입출력 관리자</code>에게 명령하고 해당 프로세스는 <code class="language-plaintext highlighter-rouge">대기 상태</code>가 됩니다. 이 명령을 <code class="language-plaintext highlighter-rouge">block</code>라고 합니다. 해당 프로세스는 입출력이 완료될 때 까지 작업을 진행할 수 없으므로 <code class="language-plaintext highlighter-rouge">대기 상태</code>가 되고 입출력이 완료되면 <code class="language-plaintext highlighter-rouge">준비 상태</code>가 됩니다. <code class="language-plaintext highlighter-rouge">block</code>이 수행되면 실행 프로세스 자리가 하나 비었으므로 준비 상태에 있는 프로세스중 새로운 프로세스를 <code class="language-plaintext highlighter-rouge">dispatch</code>시킵니다.</p>

<h3 id="4-대기-상태">4. 대기 상태</h3>
<p>대기 상태는 <code class="language-plaintext highlighter-rouge">실행 상태</code>의 프로세스가 <code class="language-plaintext highlighter-rouge">입출력</code>을 요청하면 <code class="language-plaintext highlighter-rouge">입출력이 끝날 때 까지 기다리는 상태</code>입니다. 입출력이 완료되면 인터럽트가 발생하여 <code class="language-plaintext highlighter-rouge">준비 상태</code>가 되는데 이를 <code class="language-plaintext highlighter-rouge">wakeup</code>이라고 합니다.</p>

<h3 id="5-완료-상태">5. 완료 상태</h3>
<p>프로세스가 자신의 일을 끝마친 상태로 <code class="language-plaintext highlighter-rouge">코드와 데이터</code>를 메모리에서 해제하고 <code class="language-plaintext highlighter-rouge">PCB</code>또한 해제합니다. 정상적인 종료는 <code class="language-plaintext highlighter-rouge">exit()</code>명령으로 처리하지만 비정상적인 종료면 종료 직전의 메모리를 옮기는데 이를 <code class="language-plaintext highlighter-rouge">코어 덤프</code>라고 합니다.</p>

<h1 id="문맥-교환context-switching">문맥 교환(context switching)</h1>
<p>문맥 교환의 정의는 CPU를 사용중이던 프로세스는 나가고 새로운 프로세스를 받아 들이는 작업을 의미한다.</p>

<h3 id="문맥-교환-절차">문맥 교환 절차</h3>
<p><img src="/docs/OS/images/context_switching_2.png" alt="co" /><br />
<strong>(쉽게 배우는 운영체제 image)</strong><br />
프로세스 P1과 P2의 문맥 교환 과정이다. p1의 <code class="language-plaintext highlighter-rouge">타임 슬라이스</code>를 다 사용하고 <code class="language-plaintext highlighter-rouge">timeout</code>이 발생하고 p2는 <code class="language-plaintext highlighter-rouge">dispatch</code>가 발생하여 cpu를 선점한다. 또 다시 <code class="language-plaintext highlighter-rouge">타임 슬라이스</code>가 다하고 나면 p2에서 <code class="language-plaintext highlighter-rouge">timeout</code>가 발생하고 p1에서는 <code class="language-plaintext highlighter-rouge">dispatch</code>가 발생하여 CPU를 선점한다.<br />
그림에서는 두 프로세스로만 나와 있지만 실제 운영체제에서는 많은 프로세스가 위 과정으로 CPU를 선점한다.</p>

<h1 id="프로세스-구조">프로세스 구조</h1>
:ET